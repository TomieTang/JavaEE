XML作用
1.用来保存数据
2.用来做配置文件
3.数据传输载体

XML文档结构：倒状树形结构

XML定义：
>其实就是一个文件，后缀为 .xml
1.文档声明 
简单声明，version：解析这个xml的时候，使用什么版本的解析器解析
<?xml version="1.0" ?>
encoding：解析xml中的文字的时候，使用什么编码来翻译
<?xml version="1.0" encoding="gbk" ?>
standalone：no - 该文档会依赖关联其他文档，yes - 这是一个独立的文档
<?xml version="1.0" encoding="gbk" standalone="no" ?>

encoding详解
>在解析这个xml的时候，使用什么编码去解析。 --解码
      文字，而是存储这些文字对应的二进制。那么这些文字对应的二进制到底

是多少呢，要根据文件使用的编码来得到。
>默认文件保存的时候，使用的是GBK的编码保存。
所以想让我们的xml能够正常的显示中文，有两种解决办法
1.让encoding是GBK 或者 gb2312
2.如果encoding是utf-8，那么保存文件的时候也必须是utf-8
3.保存的时候见到的ANSI对应的其实是我们本地编码GBK

GBK是默认的，国标的
为了通用，建议使用UTF-8编码，以及encoding都是utf-8


元素定义（标签）
1.其实就是里面的标签，< >起来的都叫元素，成对出现。
2.文档声明下来的第一个元素叫做根元素（根标签）
3.标签里面可以嵌套标签
4.空标签
     既是开始也是结束，一般配合属性来用
5.标签可以自定义
   XML命名规则
      名称可以含字母，数字以及其他字符
      名称不能以数字或者标点符号开始
      名称不能以字符“xml”或者XML，Xml开始
      名称不能包含空格
    命名尽量简单，做到见名知义

简单元素 & 复杂元素
简单元素：元素里包含了普通的文字
复杂元素：元素里面还可以嵌套其他的元素


属性的定义
>定义在元素里面，<元素名称 属性名称="属性的值"></元素名称>

xml注释：
>和html的注释一样 <!-- -->
>xml的注释，不允许放置在文档的第一行，必须在文档声明的下面。

CDATA区
*非法字符
    严格地讲，在xml中仅有字符<和&是非法的。省略号，引号和大于号是合法的

，但是把他们替换为实体引用是个好习惯。
如果某段字符串里面有过多的字符，并且里面包含了类似标签或者关键字的这种

文字，不想让xml的解析器去解析，那么可以使用CDATA来包装。不过这个CDATA一

般比较少看到，通常在服务器给用户端返回数据的时候。


xml解析
>其实就是获取元素里面的字符数据或者属性数据
xml解析方式(面试常问：有很多种，但是常用的有两种)
*DOM
*SAX

针对这两种解析方式的API
针对这两种解析方式，给出的解决方案有哪些：
jaxp 比较繁琐
jdom 
dom4j使用比较广泛

Dom4j基本用法
element.element("stu"):返回该元素下的第一个stu元素
element.element():返回该元素下的所有子元素
1.创建SaxReader对象
2.指定解析的XML
3.获取根元素
4.根据根元素获取子元素或者下面的子孙元素

try {
			
	//1. 创建sax读取对象
			
	SAXReader reader = new SAXReader(); //jdbc -- classloader
	

	
	//2. 指定解析的xml源
			
	Document  document  = reader.read(new File

("src/xml/stus.xml"));
			
			
	//3. 得到元素、
			
	//得到根元素
			
	Element rootElement= document.getRootElement();
			
			
	//获取根元素下面的子元素 age
		
	//rootElement.element("age") 
			
	//System.out.println(rootElement.element("stu").element

("age").getText());


			
	//获取根元素下面的所有子元素 。 stu元素
			
	List<Element> elements = rootElement.elements();
		

	
	//遍历所有的stu元素
			
	for (Element element : elements) {
				
	//获取stu元素下面的name元素
				
	String name = element.element("name").getText();
		

		
	String age = element.element("age").getText();
			

	
	String address = element.element("address").getText();
		

		
	System.out.println("name="+name+"==age+"+age

+"==address="+address);
			}
			
	

	
} catch (Exception e) {
			
	e.printStackTrace();
		
	}




Dom4j的Xpath的使用
> dom4j里面支持xpath的写法，xpath其实是xml的路径语言，支持我们在解析xml

的时候，能够快速的定位到具体的某一个元素
1.添加jar包依赖
   jaxen-1.1-beta-6.jar
2.在查找指定的节点的时候，根据xpath语法规则来查找
3.后续的代码与以前的解析代码一样


XML约束

###DTD：语法自成一派，早期就出现，可读性较差
1.引入网络上的DTD
<!-- 文档类型 根标签名字 网络上的dtd dtd名称 dtd的路径
<!DOCTYPE stus PUBLIC "//UNKNOWN/" "unknown.dtd"> -->
2.引入本地的DTD
<!-- 引入本地的DTD： 根标签名字 引入本地的DTD dtd的位置 -->
<!--<!DOCTYPE stus SYSTEM "stus.dtd"> -->
3.直接在XML里面嵌入DTD

###Schema：其实就是一个xml，使用xml的语法规则，解析起来比较方便，是为了

替代DTD，但是Schema约束文本内容比DTD的内容还要多，所以目前也没有真正意

义上的替代DTD


名称空间的作用
一个xml如果想指定它的约束规则，假设使用的是DTD，那么这个xml只能指定一个

DTD，不能指定多个。但是如果一个xml的约束是定义在schema里面，并且是多个schema，那么是可以的。简单地说，一个xml可以引用多个schema约束，但是只能引用一个DTD约束。
名称空间的作用就是在写元素的时候，可以指定该元素使用的是哪一套约束规则。默认情况下，如果只有一套规则，那么都可以这么写。
   <aa:name></aa:name>
   <bb:name></bb:name>	


程序架构
·C/S（client、server）
>QQ,微信，lol
优点：一部分代码在客户端，用户体验比较好
缺点：服务器更新，客户端也要随着更新，占用资源大

·B/S（browser/server）
>网页游戏，webQQ
优点：客户端只要有浏览器就可以了，占用资源小，不用更新
缺点：用户体验不佳
